#!/usr/bin/env python
# circadian_promoter.py
"""""""""""""""""""""""""""
# Author: Keila Velazquez-Arcelay
# Date: 2022/04
#
# Description: Create a promoter region for each circadian gene and extract the 1kgp variants.
#              Transcription start sites were downloaded from Biomart.
#              Here I use the most upstream start site of all the transcripts.
#              Promoter regions are defined as: 5kb upstream and 1kb downstream of the TSS.
# 
# This script uses the package pyliftover to convert from build hg38 to hg19. Alternatively, 
# use intersectBed to liftOver to hg19.
# $ liftOver circadian_promoter_hg38.bed ucsc/liftOver/hg38ToHg19.over.chain.gz \ 
#  circadian_promoter_hg38.liftover.hg19.bed circadian_promoter_hg38.liftover.hg19_unlifted.bed
# 
"""""""""""""""""""""""""""


# DATA FILES
TSS_FILE = '../data/raw_circadian_tss_hg38.tsv'
CIRCADIAN_FILE = '../data/circadian_genes.bed'
CIRCADIAN_L = '../data/circadian_genes.list'
SNPS_FILE ='../data/circadian_variants.bed.xz'

# OUTPUT FILE
OUTPUT_REGIONS = '../data/circadian_promoter.bed'
OUTPUT_SNPS = '../data/circadian_variants_promoter.bed'


import pandas as pd
import numpy as np
from pyliftover import LiftOver
import pybedtools


def intersect_a_and_b(df_a,df_b):
    df_a = df_a.add_suffix('_wa')
    df_b = df_b.add_suffix('_wb')
    df_a_cols = df_a.columns.values.tolist()
    df_b_cols = df_b.columns.values.tolist()
    a = pybedtools.BedTool.from_dataframe(df_a)
    b = pybedtools.BedTool.from_dataframe(df_b)
    a_and_b = a.intersect(b, wa=True, wb=True)
    a_and_b_df = pd.read_table(a_and_b.fn, names=df_a_cols+df_b_cols)
    return a_and_b_df


# IMPORT CIRCADIAN TSS GENERATED BY BIOMART. hg38
tss_hg38 = pd.read_csv(TSS_FILE, sep='\t')

# SELECT THE MOST UPSTREAM TSS SITE FOR EACH GENE
tss_hg38 = tss_hg38.groupby(['GeneID']).min().reset_index()

# LOAD CIRCADIAN GENES
circadian_chr_id = pd.read_csv(CIRCADIAN_FILE, sep='\t', usecols = ['Chr', 'GeneID'])
circadian_id_name = pd.read_csv(CIRCADIAN_L, sep='\t')
circadian_genes = pd.merge(circadian_chr_id,circadian_id_name, on='GeneID')
circadian_tss_hg38 = pd.merge(circadian_genes,tss_hg38, on='GeneID')#.iloc[:,[0,2,1]]

# LIFTOVER TO HG19
# LiftOver object
lo = LiftOver('hg38', 'hg19')

l = []
for i in range(len(circadian_tss_hg38)):
    chrom = circadian_tss_hg38['Chr'][i]
    start = circadian_tss_hg38['TSS'][i]
    strand = '+'
    gene = circadian_tss_hg38['GeneID'][i]
    # LiftOver
    hg19 = lo.convert_coordinate(chrom, start, strand)[0]
    l.append(f'{gene}, {hg19[1]}')
    
tss_hg19 = pd.DataFrame([n.split(', ') for n in l], columns=['GeneID', 'TSS'])

# ADD EMPTY Start/End COLUMNS
circadian_promoter_hg19 = circadian_tss_hg38.iloc[:,:-1].copy()
circadian_promoter_hg19.insert(1, 'Start', np.NaN)
circadian_promoter_hg19.insert(2, 'End', np.NaN)
#circadian_promoter_hg19.insert(-1, 'TSS', tss_hg19)
circadian_promoter_hg19 = pd.merge(circadian_promoter_hg19,tss_hg19,on='GeneID')

# FILL Start/End COLUMNS WITH A -5K UP AND +1K DOWNSTREAM RANGE FROM TSS
circadian_promoter_hg19['Start'] = circadian_promoter_hg19['TSS'].astype(int) - 5000
circadian_promoter_hg19['End'] = circadian_promoter_hg19['TSS'].astype(int) + 1000

# FIND VARIANTS WITHIN PROMOTER REGIONS
snps = pd.read_csv(SNPS_FILE, sep='\t', compression='xz')
x = intersect_a_and_b(snps,circadian_promoter_hg19).iloc[:,:8]
x.columns = x.columns.str.replace(r'_wa|_wb', '')


# SAVE DATA
#circadian_promoter_hg19.to_csv(OUTPUT_REGIONS, index=False, sep='\t')
x.to_csv(OUTPUT_SNPS+'.xz', index=False, sep='\t', compression='xz')
